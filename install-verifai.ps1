# Script de Instala√ß√£o Autom√°tica - VerifAI Desktop
# Autor: VerifAI
# Vers√£o: 1.0

param(
    [switch]$Portable,
    [switch]$Silent
)

Write-Host "üöÄ VerifAI Desktop - Instalador Autom√°tico" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Green

# Configura√ß√µes
$RepoOwner = "silvaleo1979"
$RepoName = "verifai-desktop"
$Version = "v1.0.0"
$GitHubApi = "https://api.github.com/repos/$RepoOwner/$RepoName/releases/latest"

# URLs dos arquivos
$InstallerUrl = "https://github.com/$RepoOwner/$RepoName/releases/download/$Version/VerifAI.Assistant-1.0.0.Setup.exe"
$PortableUrl = "https://github.com/$RepoOwner/$RepoName/releases/download/$Version/VerifAI.Assistant-win32-x64-1.0.0.zip"

# Diret√≥rios
$DownloadDir = "$env:USERPROFILE\Downloads\VerifAI"
$InstallDir = "$env:PROGRAMFILES\VerifAI Desktop"

# Criar diret√≥rios se n√£o existirem
if (!(Test-Path $DownloadDir)) {
    New-Item -ItemType Directory -Path $DownloadDir -Force | Out-Null
    Write-Host "üìÅ Diret√≥rio de download criado: $DownloadDir" -ForegroundColor Yellow
}

# Fun√ß√£o para baixar arquivo
function Download-File {
    param($Url, $OutputPath)
    
    Write-Host "üì• Baixando arquivo..." -ForegroundColor Cyan
    Write-Host "URL: $Url" -ForegroundColor Gray
    
    try {
        $ProgressPreference = 'SilentlyContinue'
        Invoke-WebRequest -Uri $Url -OutFile $OutputPath -UseBasicParsing
        Write-Host "‚úÖ Download conclu√≠do: $OutputPath" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "‚ùå Erro no download: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fun√ß√£o para instalar vers√£o port√°til
function Install-Portable {
    $ZipPath = "$DownloadDir\VerifAI-Assistant-portable.zip"
    
    Write-Host "üì¶ Instalando vers√£o port√°til..." -ForegroundColor Cyan
    
    if (Download-File -Url $PortableUrl -OutputPath $ZipPath) {
        $ExtractPath = "$env:USERPROFILE\Desktop\VerifAI Desktop"
        
        if (Test-Path $ExtractPath) {
            Remove-Item $ExtractPath -Recurse -Force
        }
        
        Write-Host "üìÇ Extraindo arquivos..." -ForegroundColor Yellow
        Expand-Archive -Path $ZipPath -DestinationPath $ExtractPath -Force
        
        Write-Host "‚úÖ Vers√£o port√°til instalada em: $ExtractPath" -ForegroundColor Green
        Write-Host "üéØ Execute: $ExtractPath\VerifAI.exe" -ForegroundColor Cyan
        
        # Limpar arquivo tempor√°rio
        Remove-Item $ZipPath -Force
        
        return $true
    }
    return $false
}

# Fun√ß√£o para instalar vers√£o completa
function Install-Full {
    $ExePath = "$DownloadDir\VerifAI-Assistant-Setup.exe"
    
    Write-Host "üîß Instalando vers√£o completa..." -ForegroundColor Cyan
    
    if (Download-File -Url $InstallerUrl -OutputPath $ExePath) {
        Write-Host "‚öôÔ∏è Executando instalador..." -ForegroundColor Yellow
        
        if ($Silent) {
            # Instala√ß√£o silenciosa
            Start-Process -FilePath $ExePath -ArgumentList "/S" -Wait
            Write-Host "‚úÖ Instala√ß√£o silenciosa conclu√≠da" -ForegroundColor Green
        } else {
            # Instala√ß√£o interativa
            Start-Process -FilePath $ExePath -Wait
            Write-Host "‚úÖ Instala√ß√£o conclu√≠da" -ForegroundColor Green
        }
        
        # Limpar arquivo tempor√°rio
        Remove-Item $ExePath -Force
        
        return $true
    }
    return $false
}

# Fun√ß√£o para verificar se j√° est√° instalado
function Test-Installation {
    $InstalledPaths = @(
        "$env:PROGRAMFILES\VerifAI Desktop",
        "$env:PROGRAMFILES(X86)\VerifAI Desktop",
        "$env:USERPROFILE\Desktop\VerifAI Desktop"
    )
    
    foreach ($Path in $InstalledPaths) {
        if (Test-Path "$Path\VerifAI.exe") {
            Write-Host "‚ö†Ô∏è VerifAI Desktop j√° est√° instalado em: $Path" -ForegroundColor Yellow
            return $true
        }
    }
    return $false
}

# Fun√ß√£o para criar atalho na √°rea de trabalho
function Create-Shortcut {
    param($TargetPath)
    
    $ShortcutPath = "$env:USERPROFILE\Desktop\VerifAI Desktop.lnk"
    $WScriptShell = New-Object -ComObject WScript.Shell
    $Shortcut = $WScriptShell.CreateShortcut($ShortcutPath)
    $Shortcut.TargetPath = $TargetPath
    $Shortcut.WorkingDirectory = Split-Path $TargetPath
    $Shortcut.Description = "VerifAI Desktop - Assistente de IA"
    $Shortcut.Save()
    
    Write-Host "üîó Atalho criado na √°rea de trabalho" -ForegroundColor Green
}

# Verificar se j√° est√° instalado
if (Test-Installation) {
    $Continue = Read-Host "Deseja continuar mesmo assim? (S/N)"
    if ($Continue -ne "S" -and $Continue -ne "s") {
        Write-Host "‚ùå Instala√ß√£o cancelada" -ForegroundColor Red
        exit
    }
}

# Escolher tipo de instala√ß√£o
if ($Portable) {
    Write-Host "üì¶ Instalando vers√£o port√°til..." -ForegroundColor Cyan
    if (Install-Portable) {
        $ExtractPath = "$env:USERPROFILE\Desktop\VerifAI Desktop"
        Create-Shortcut -TargetPath "$ExtractPath\VerifAI.exe"
    }
} else {
    Write-Host "üîß Instalando vers√£o completa..." -ForegroundColor Cyan
    if (Install-Full) {
        # Criar atalho para vers√£o instalada
        $InstalledPath = "$env:PROGRAMFILES\VerifAI Desktop\VerifAI.exe"
        if (Test-Path $InstalledPath) {
            Create-Shortcut -TargetPath $InstalledPath
        }
    }
}

Write-Host ""
Write-Host "üéâ Instala√ß√£o conclu√≠da!" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Green
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "1. Execute o VerifAI Desktop" -ForegroundColor White
Write-Host "2. Configure suas chaves de API" -ForegroundColor White
Write-Host "3. O sistema de atualiza√ß√£o autom√°tica est√° ativo" -ForegroundColor White
Write-Host ""
Write-Host "üåê Para mais informa√ß√µes: https://github.com/$RepoOwner/$RepoName" -ForegroundColor Blue

